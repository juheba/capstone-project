# Configure this function - 
# Provide iamRoleStatements property for performing Actions on DynamoDB
GetTodos:
  tracing: true
  handler: src/lambda/http/getTodos.main
  events:
    - http:
        method: get
        path: todos
        cors: true
        authorizer: Auth
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}'

# Configure this function - 
# Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
# To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
# To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
CreateTodo:
  tracing: true
  handler: src/lambda/http/createTodo.main
  events:
    - http:
        method: post
        path: todos
        cors: true
        authorizer: Auth
        request:
          schemas:
            application/json: ${file(./schemas/create-todo-model.json)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}'

# Configure this function
# Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
UpdateTodo:
  tracing: true
  handler: src/lambda/http/updateTodo.main
  events:
    - http:
        method: patch
        path: todos/{todoId}
        cors: true
        authorizer: Auth
        request:
          schemas:
            application/json: ${file(./schemas/update-todo-model.json)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}'

# Configure this function
# Provide property for setting up CORS, Authorizer, iamRoleStatements
DeleteTodo:
  tracing: true
  handler: src/lambda/http/deleteTodo.main
  events:
    - http:
        method: delete
        path: todos/{todoId}
        cors: true
        authorizer: Auth
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}'

# Configure this function
# Provide property for setting up CORS, Authorizer, iamRoleStatements
GenerateUploadUrl:
  tracing: true
  handler: src/lambda/http/generateUploadUrl.main
  events:
    - http:
        method: post
        path: todos/{todoId}/attachment
        cors: true
        authorizer: Auth
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - s3:*
      Resource: arn:aws:s3:::${self:provider.environment.TODOS_ATTACHMENTS_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}'