Resources:

  # Possible ResponseTypes: https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html
  GatewayResponsesBadRequestBody:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH'"
      ResponseType: BAD_REQUEST_BODY
      RestApiId: !Ref ApiGatewayRestApi
      ResponseTemplates:
        application/json: "{'statusCode': 400, errorCode:'API400', 'message': 'Bad request parameter', 'details': '$context.error.validationErrorString'}"

  # Add necessary AWS resources. You will need at least the following AWS resources
  # Fill the properties
  # Feel free to change the names as you like.
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref ApiGatewayRestApi

  # Create a DynamoDB table with local secondary index and a composite key
  CollectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: collectionId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:  # Key schema with partition and sort key creates a composite key
        - AttributeName: userId
          KeyType: HASH                 # userId is the partitionKey
        - AttributeName: collectionId
          KeyType: RANGE                # todoId is the sortKey
      BillingMode: PAY_PER_REQUEST
      TableName: ${self:provider.environment.COLLECTION_TABLE}
      LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.COLLECTION_CREATED_AT_INDEX}
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE            # createdAt is the indexKey
          Projection:
            ProjectionType: ALL # What attributes will be copied to an index

  # Create a DynamoDB table with local secondary index and a composite key
  TodosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: todoId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:  # Key schema with partition and sort key creates a composite key
        - AttributeName: userId
          KeyType: HASH                 # userId is the partitionKey
        - AttributeName: todoId
          KeyType: RANGE                # todoId is the sortKey
      BillingMode: PAY_PER_REQUEST
      TableName: ${self:provider.environment.TODOS_TABLE}
      LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE            # createdAt is the indexKey
          Projection:
            ProjectionType: ALL # What attributes will be copied to an index

  # Complete the bucket properties below.
  # Do not forget to add the CorsConfiguration propoerty
  AttachmentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  # Complete the policy below and attach it to the bucket defined above
  # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: AttachmentsBucketPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
      Bucket: !Ref AttachmentsBucket  # Ref function from CloudFormation